syntax = "proto3";
package user;

import "user/country.proto";
import "user/account.proto";

service UserService {
  //用户注册 user regist
  rpc SignUp(SignUpRequest) returns (SignUpResponse) {}
  //验证码 verify code
  rpc VerifyCode(VerifyCodeRequest) returns (VerifyCodeResponse) {}
  //验证码图片
  rpc VerifyImage(VerifyImageRequest) returns (VerifyImageResponse) {}
  //登陆user login
  rpc SignIn(SignInRequest) returns (SignInResponse) {}
  //修改密码
  rpc UpdatePwd(UpdatePwdRequest) returns (UpdatePwdResponse) {}

  //验证密码 same as SignIn, but willn't gen token ,  if pwd  ok,the return SignInResponse is emputy;  if pwd err, thrown an error
  rpc VerifyPwd(SignInRequest) returns (SignInResponse) {}
  //忘记密码
  rpc ForgetPwd(ForgetPwdRequest) returns (ForgetPwdResponse) {}
  //same as UpdateUser-rpc ,but with kyc commit.
  rpc Kyc(UserInfo) returns (UserInfo) {}
  //代理商提交客户kyc信息,并开卡
  rpc AgentKycForCard(AgentKycInfo) returns (AgentKycForCardResponse) {}
  //代理商通过用户openid开卡
  rpc AgentCard(AgentCardRequest) returns (AgentKycForCardResponse) {}
  //按邮箱获取代理商用户的kyc信息
  //正常返回AgentKycInfo;如果未找到返回grcp.NotFound err; 其它情况返回Unknow err
  rpc GetAgentKycInfo(GetAgentKycInfoRequest) returns (AgentKycInfo) {}
  //获取代理商用户的kyc信息列表
  rpc ListAgentKycInfo(ListAgentKycInfoRequest) returns (ListAgentKycInfoResponse) {}
  //修改用户信息
  // input parameter UserInfo-Obj must first get from GetUserInfo-rpc,
  // then update the UserInfo-obj,last call UpdateUser with UserInfo-obj
  rpc UpdateUser(UserInfo) returns (UserInfo) {}

  rpc UpdateUserLang(UpdateUserLangRequest) returns (UpdateUserLangResponse) {}
  //ignored
//  rpc Upload(UploadRequest) returns (UploadResponse) {}
  //获取用户信息
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse) {}
  //返回被当前用户邀请的所有人.
  rpc ListInvitedUser(ListInvitedUserRequest) returns (ListInvitedUserResponse) {}
  //当前代理商用户的返佣
  rpc ListReward(ListRewardRequest) returns (ListRewardResponse) {}
  //当前代理商用户的返佣,返佣信息含用户信息
  rpc ListRewardWithUser(ListRewardWithUserRequest) returns (ListRewardWithUserResponse) {}
}

message ForgetPwdRequest {
  string email = 1;
  string password = 2;
  //VerifyCode
  string vcode = 3;
  //got from VerifyImageRPC
  string verify_code_id = 4;
}
message ForgetPwdResponse {

}
message UpdateUserLangRequest {
  string language=1;
}
message UpdateUserLangResponse {

}
message UserInfo {
  int64 id = 1;
  string user_name = 2;
  string password_hash = 3;
  string email = 4;
  //中心钱包eth地址
  // @gotags: gorm:"Index"
  string wallet_address=37;
  //中心钱包tron地址
  string tron_address=38;
  //Deprecated: client wallet  address
  string eth_address=25;
  string btc_address=26;

  // kyc info

  CountryCode country_code = 5;

//国家(快递用，（CHN 中国 HKG 香港）
  CountryCode country = 43;
  CurrencyCode currency=23;
  //image-path1; identity card front  // old obd-ui-field
  string id1 = 6;
  //image-path2; identity card back // old  obd-ui-field
  string id2 = 7;
  //id_card number
  string id_num =8;
  // old obd-ui-field
  string social_id = 9;
  string firstName =10;
  string lastName =11;
  string mobile=12;
  //date of birthday; format: 1981-12-01
  string dob=13;
  //addressLine1
  string address1 = 14;
  //  addressLine2
  string address2 = 15;
  string city = 16;
  string state = 17;
  string post_code = 18;

  //卡预留手机号区号
  string areaCode = 36;
  //婚姻状况，0未婚、1已婚、2离婚、3丧偶、4其他
  string marState = 39;
  //地址类型，家庭地址0，公司地址1
  string addressType = 40;
  //性别，M=男，F=女
  string gender = 41;
  //证件类型，1:身份证 2:护照
  string idType =  42;


  bool kycinfo_ok =20;
  string open_id=21;
  //passed or pending
  string kyc_status=22;

  uint64 updated_at = 19;
  uint64 created_at = 24;
  //虚似卡数量
  uint64 card_count = 27;
//实体卡数量
  uint64 pcard_count =44 ;
  //type=0 为app注册用户；type=1 为商户端自动注册用户；type=2 商户；type=3代理商用户,此类型用户在app端注册后,需要后台手动标记为代理商;  type=1/2的用户，钱包key由服务器管理
  //user with user_type>0 ,this type user's eth wallet is managed by our server
  //0 app user; 1  proxyed user;  2 proxyed MERNO;  3 代理商用户
  int64 user_type=28;
  //true是表示用户是代理商邀请来的,这种用户开卡或数币交易方面,会要多付出些佣金.
  bool is_agent_channel=33;
  //当user_type=1时，这个字段表示用户所属的商户id。其它情况为0，无用途
  int64 muser_id=29;
  //用户生成的邀请码
  string invitation_code=30;
  //用户注册时输入的邀请码
  string regist_code=31;

  //注册后,系统根据regist_code填充的邀请人(代理商)id；如果是代理商邀请的,就是代理商id；如果不是代理商邀请的,使用平台代理商id.
  int64 invitation_userid=32;

  //注册后,系统根据regist_code填充的邀请人id.
  int64 ref_userid=34;
  //用户语言偏好
  string language =35;
}

message AgentKycForCardResponse {
  string card_no  = 1;
}
message GetAgentKycInfoRequest {
  //客户邮箱
  string email = 1;
}
message ListAgentKycInfoRequest {
}
message ListAgentKycInfoResponse {
  repeated AgentKycInfo list = 1;
}
message AgentCardRequest {
  //客户openid
  string open_id=1;
}
message AgentKycInfo {
  //系统id
  int64 id = 1;
  //代理商邮箱ID,由服务端设置
  string agentCId=2;
//代理商用户ID,由服务端设置
  int64 agent_id=3;
// 客户的邮箱
  string email = 4;


  CountryCode country_code = 5;
  //国家(快递用，（CHN 中国 HKG 香港）
  CountryCode country = 43;
  CurrencyCode currency=23;
  //image-path1; identity card front  // old obd-ui-field
  string id1 = 6;
  //image-path2; identity card back // old  obd-ui-field
  string id2 = 7;
  //id_card number
  string id_num =8;
  // old obd-ui-field
  string social_id = 9;
  string firstName =10;
  string lastName =11;
  string mobile=12;
  //date of birthday; format: 1981-12-01
  string dob=13;
  //addressLine1
  string address1 = 14;
  //  addressLine2
//  string address2 = 15;

  string city = 16;
  string state = 17;
  string post_code = 18;

  //卡预留手机号区号
  string areaCode = 36;
  //婚姻状况，0未婚、1已婚、2离婚、3丧偶、4其他
  string marState = 39;
  //地址类型，家庭地址0，公司地址1
  string addressType = 40;
  //性别，M=男，F=女
  string gender = 41;
  //证件类型，1:身份证 2:护照
  string idType =  42;


  string open_id=21;
  //passed or pending
  string kyc_status=22;

  uint64 updated_at = 19;
  uint64 created_at = 24;
  //申请到的实体卡号. kyc通过后,由服务端生成
  string cardNo=25;
}

message SignUpRequest {
  string user_name = 1;
  string password = 2;
  string confirm_password = 3;
  string email = 4;
  //VerifyCode
  string vcode = 5;
  //got from VerifyCodeRPC
  string verify_code_id = 6;

  //用户注册时输入的邀请码
  string regist_code=10;

  //[option]
  string device_id=7;
  //[option] android or ios
  string os=8;
  //[option]
  string osVersion=9;
}
message SignUpResponse {
  string token = 1;
}

message VerifyCodeRequest {
  string email = 1;
}
message VerifyCodeResponse {
  string verify_code_id = 1;
}
message VerifyImageRequest {
}
message VerifyImageResponse {
  string verify_code_id = 1;
  string image_bs = 2;
}

message SignInRequest {
  string user_name = 1;
  string password = 2;
  //VerifyCode
  string vcode = 3;
  //got from VerifyImageRPC
  string verify_code_id = 4;

  //[option]
  string device_id=7;
  //[option] android or ios
  string os=8;
  //[option]
  string osVersion=9;
}
message SignInResponse {
  string token = 1;
  bool kyc_ok = 2;
}
message UpdatePwdRequest {
  string old_password = 2;
  string new_password = 3;
}
message UpdatePwdResponse {
}

message KycRequest {
  CountryCode country_code = 1;
  CurrencyCode currency=2;
  //image-path1; identity card front  // old obd-ui-field
  string id1 = 3;
  //image-path2; identity card back // old  obd-ui-field
  string id2 = 4;
  //id_card number
  string id_num =5;
  // old obd-ui-field
  string social_id = 6;
  string firstName =7;
  string lastName =8;
  string mobile=9;
  //date of birthday; format: 1981-12-01
  string dob=10;
  //addressLine1
  string address1 = 11;
//  addressLine2
  string address2 = 12;
  string city = 13;
  string state = 14;
  string post_code = 15;
}
message KycResponse {
}

//message UploadRequest {
//  //usage: example id1 id2;
//  string tag = 1;
//  //  image file name at local
//  string name = 2;
//  //image binanry
//  bytes content = 3;
//}
//message UploadResponse {
//  string image_url = 1;
//}

message GetUserInfoRequest {
}
message GetUserInfoResponse {
  UserInfo user = 1;
}

message ListInvitedUserRequest {
  //same as mysql's offsset; default(0)
  int64 start =2;
  //same as mysql's limit; default(20)
  int64 limit =3;
}

message ListInvitedUserResponse {
  repeated InvitedUser list = 1;
  int64 count =2;
}
message InvitedUser {
  string user_name = 3;
  string email = 4;
  string firstName =1;
  string lastName =2;
  uint64 created_at=5;
}

message ListRewardRequest {
  //same as mysql's offsset; default(0)
  int64 start =1;
  //same as mysql's limit; default(20)
  int64 limit =2;
}
message ListRewardResponse {
  repeated UserReward list = 1;
  double total_amt=2;
}
message ListRewardWithUserRequest {
  //same as mysql's offsset; default(0)
  int64 start =1;
  //same as mysql's limit; default(20)
  int64 limit =2;
  //日期,以unix秒为单位. 需要同ListReward返回记录的created_at一致; 0返回所有日期数据
  uint64 date_sec=3;
}
message ListRewardWithUserResponse {
//  总用户数
  int64 user_count=2;
//  总佣金
  double rewards=3;
  repeated UserRewardItem list = 1;
}
//以日期为单位,代理商应收佣金
message UserReward {
  //日期,以unix秒为单位
  uint64 created_at=1;
  //usd_amt
  double amt=2;
  //未结算0, 已经结算1
  int64 status =3;
}
//以日期为单位,相关的用户给代理商产生了多少佣金.
message UserRewardItem {
  int64 id = 9;
  int64 reward_userid = 1;
  //分佣日期,以秒为单位,
  // @gotags: gorm:"uniqueIndex:idx_userid_date"
  int64  date_sec = 2;
  //分佣日期
  string data_str = 3;
  // @gotags: gorm:"uniqueIndex:idx_userid_date"
  int64 user_id = 4;
  double reward = 5;
  // @gotags: gorm:"type:timestamp;autoCreateTime"
  Timestamp created_at = 7;

  // @gotags: gorm:"type:timestamp;autoUpdateTime"
  Timestamp updated_at = 8;
  // @gotags: gorm:"<-:false"
  string user_name =10;
}
//佣金明细
message UserRewardDetail {
  int64 id = 1;
  int64 reward_userid = 2;
  int64 user_id = 3;
  int64 source_id=4;
  SourceType source_type=5;
  enum SourceType{
    UnKnow = 0;
    //账号usd兑换数币
    BuyCoin=1;
    //数币兑换账号usd
    SellCoin=2;
    //提现到虚似卡
    WithdrawTOVcard=3;
    //提现到实体卡
    WithdrawTOPcard=4;
    //创建虚似卡
    CreateVcard=5;
    //创建实体卡
    CreatePcard=6;
    //Transak佣金
    Transak = 7;
  }
  double reward = 6;
  //未结算0, 已经结算1
  int64 status =9;
  string tx_id=10;

  int64 created_at = 7;
  // @gotags: gorm:"index;"
  int64 updated_at = 8;
}