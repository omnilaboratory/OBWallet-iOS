syntax = "proto3";
package user;

import "user/country.proto";
import "google/protobuf/timestamp.proto";

service account{
  // 获取账号信息
  rpc GetAccountInfo(GetAccountInfoRequest) returns (AccountInfo) {}

  //current only usd recharge/pay history

  //用户账号usd变动历史
  rpc GetAccountHistory(GetAccountHistoryRequest) returns (GetAccountHistoryResponse) {}
  //数币兑换计算
  rpc GetUserSwapPrice(GetUserSwapPriceRequest) returns (GetUserSwapPriceResponse) {}
//    买币
  rpc SellCoin(SellCoinRequest) returns (SellCoinResponse) {}
  //卖币
  rpc BuyCoin(BuyCoinRequest) returns (BuyCoinResponse) {}
  //nft兑换币或usd,或usd并充值到卡
  rpc SellNft(SellNftRequest) returns (SellNftResponse) {}
  // cardRecharge with big amt
//  rpc BuyNft(BuyNftRequest) returns (BuyNftResponse) {}

  //获取nft余额
  rpc GetNftBlance(GetNftBlanceRequest) returns (GetNftBlanceResponse) {}
  //获取nft详情
  rpc GetNftToken(GetNftTokenRequest) returns (NftToken) {}


  //获取链上nft-token事件表列。每个token一行记录。
  rpc ListNftTokenEvents(ListNftTokenEventsRequest) returns (ListNftTokenEventsResponse) {}

  //大额transak充值时的回调地址
  rpc GetDcPayUrl(GetDcPayUrlRequest) returns (GetDcPayUrlResponse) {}
  //数币兑换历史
  rpc GetSwapTxList(GetSwapTxListRequest) returns (GetSwapTxListResponse) {}
  //eth usdt/usdc链上交易确认情况列表
  rpc GetTrackedTxList(GetSwapTxListRequest) returns (GetTrackedTxListResponse) {}
  //获取币价
  rpc GetCoinPrice(GetCoinPriceRequest) returns (GetCoinPriceResponse) {}

  //获取代理商佣金配制
  rpc GetAgentConfig(GetAgentConfigRequest) returns(AgentConfig){}
//  设置代理商佣金配制
  rpc SetAgentConfig(AgentConfig) returns(AgentConfig){}
}
message GetCoinPriceRequest {
    TrackedTx.ContractSymbol symbol =1;
}
message GetCoinPriceResponse {
  double price = 1;
}
message GetSwapTxListRequest{
  //same as mysql's offsset; default(0)
  int64 start =1;
  //same as mysql's limit; default(20)
  int64 limit =2;
  //coin Symbol: eth/usdc/usdt ;  if usd used, will return all record
  TrackedTx.ContractSymbol Symbol = 3;
  //值为true时，并且Symbol参数是ContractSymbol-NFT,会加载当前订单的nft-token日志。
  bool load_nft_token_log=4;
}
message GetSwapTxListResponse{
   repeated SwapTx items =1;
}

message ListNftTokenEventsRequest{
  //same as mysql's offsset; default(0)
  int64 start =1;
  //same as mysql's limit; default(20)
  int64 limit =2;
  //default is user.EthAddress
  string address=3;
}
message ListNftTokenEventsResponse{
   repeated NftTokenEvent items =1;
}

message GetNftTokenRequest{
  //default is user.EthAddress
  int64 token_id=1;
}

message GetNftBlanceRequest{
  //default is user.EthAddress
  string address=1;
  //default false, will get all token balance from our db;
  // if true, only get fix-value(1,2,5 ... 100) nft balance from chain
  bool from_chain=2;
}
message GetNftBlanceResponse{
   repeated NftToken items =1;
}
message GetTrackedTxListResponse{
   repeated TrackedTx items =1;
}

message GetAccountHistoryRequest{
  //same as mysql's offsset; default(0)
  int64 start =1;
  //same as mysql's limit; default(20)
  int64 limit =2;
  //only support: USD USDT USDC
  TrackedTx.ContractSymbol token=3;
}
message GetAccountHistoryResponse{
   repeated AccountHistory items =1;
}

message GetAccountInfoRequest{
  //USD USDT USDC ETH TRON MATIC; default(USD)
  string token_name=1;
}
message AccountInfo{
  int64 id=1;
  // @gotags gorm:"index"
  int64 user_id=2;
  double balance=5;
  //余额类型:USD USDT USDC
  string balance_type=8;
  double locked_usd=7;
  int64 updated_at=9;
  int64 created_at=6;
}

message TrackedTx{
  int64 id = 1;
  int64 user_id = 13;
  string tx_id = 2;
  string from = 3;
//  to_address
  string to = 4;
  //to_user_id
  int64 to_user_id = 15;
  string token_address = 5;
  double amt = 6;
  double usd_amt = 16;
  int64 commit_height=14;
  ContractSymbol Symbol =7;
  int64 confirms = 8;
  Status status = 9;
  string tx_err_msg=10;

  enum ContractSymbol {
    USD = 0;
    ETH = 1;
    USDT = 2;
    USDC = 3;
    NFT = 4;
  }
  enum Status {
    StatusUnknown = 0;
    TxInit = 1;
    //confirms=1
    TxCommited = 2;
    TxConfirming = 3;
    TxCommitFail = 4;
    TxFinish = 5;
  }
  int64 created_at = 11;
  int64 updated_at = 12;
}
message SwapTx{
  int64 id = 1;
  int64 user_id = 2;
  // Deprecated
  string tx_id = 3;
  int64 confirms = 9;

  TrackedTx.Status status = 13;
  string tx_err_msg=17;
  bool is_buy_coin=18;
  //example eth current is 1680$.
  double coin_price = 8;
  //amt pair with from_symbol,submit form user.
  double amt = 4;

  double target_amt = 5;
//排除gas费/平台利润/佣金后,用户所得
  double settle_amt = 15;
  double settle_price = 19;
  TrackedTx.ContractSymbol from_symbol = 6;
  TrackedTx.ContractSymbol target_symbol = 7;
  //排除gas费后的交易额;
  double exchanged_usd_amt=24;
  int64 created_at = 11;
  int64 updated_at = 12;
  bool  is_sell_nft=20;
  string nft_txid=21;
  // only for nft sell and  traget is card_no
  string card_no=22;
  //当交易的Symbol是ContractSymbol-NFT,该字段可用于加载nft订单的nft-token日志。
  //@gotags:gorm:"foreignKey:TxId;references:NftTxid"
  repeated NftTokenLog nftTokenLogs=23;
}

message SellCoinRequest {
  string txid=6;
  TrackedTx.ContractSymbol coin=2;
  double coin_amt =3;
  double usd_amt =4;
  double rate=5;
}
message SellCoinResponse {
}
message BuyCoinRequest {
  //now only  for USDT USDC
  TrackedTx.ContractSymbol coin=2;
  double coin_amt =3;
  double usd_amt =4;
  double rate=5;
}

message BuyCoinResponse {
  // Deprecated
  string txid=6;
}

message GetUserSwapPriceRequest {
  //需要兑换的币种
  TrackedTx.ContractSymbol from_symbol = 1;
  // 需要兑换的币种数量
  double from_amt = 2;
  //兑换目标币种
  TrackedTx.ContractSymbol target_symbol = 3;
}
message GetUserSwapPriceResponse {
//    兑换目标币种数量
  double target_amt =1;
  //折算后的价格, 折算项有佣金1%/gas费5$/平台利润2% /划点0.5%/ 后的价格
  double settle_price=2;
//    币种官方报价
  double raw_price=3;
  double gas_fee=4;
  //费率, 如返回的0.003 表示0.3%
  double fee_rate=5;
}

message SellNftRequest {
  //用户转移的nft-token的usd价值； all nfts to usd_amt
  double usd_amt =1;
  //需要兑换的目标币种; nft is sell  for coin/usd/usd to card
  TrackedTx.ContractSymbol coin=2;
  //需要兑换的目标币种的价格，可以从GetCoinPricer接口获取币价，usd价格是1。
  double rate=3;
  //相要兑换的目标币种的数量
  double coin_amt =5;
  //链上转移nft-token时的，交易id
  string nft_txid=6;
  //卡号，如果用户相要兑换usd,并充值到卡，需要提供卡号。
  string card_no=8;
  //转账期间，需要提前锁nft-token
  repeated int64 token_ids=9;
  //转账期间，需要提前锁每个nft的数量
  repeated int64 values=10;
}
message SellNftResponse {
}

message BuyNftRequest {
  //An integer multiple of 100
  double usd_amt =1;
}
message BuyNftResponse {
  string txid=1;
}

message GetDcPayUrlRequest {
  double usd_amt =1;
  TrackedTx.ContractSymbol coin=2;
}
message GetDcPayUrlResponse {
  string url_path=1;
}
message NftTokenEvent{
  string tx_id = 1;
  //发送地址：nft event TransferSingle.from
  string from = 2;
  //接收地址：  nft event TransferSingle.to
  string to = 3;
  //tokenid: nft event TransferSingle.id
  int64 token_id = 4;
  //token数量: nft event TransferSingle.value
  int64 value = 5;
  // nft-token美元价格。
  double item_price = 6;
  string image_url = 7;
  string name = 9;

  int64 created_at = 8;
}
message Timestamp {
  google.protobuf.Timestamp timestamp = 1;
}
//nft-token详情
message NftToken{
  string name = 9;
  string image_url = 1;
  // @gotags: gorm:"index"
  int64 token_id = 2;
  //  nft amount
  int64 amt = 3;
  // nft-token美元价格。 nft usd_price  for each nft
  double item_price = 4;
  //nft简介
  string des = 5;
  int64 id = 6;
  //only for dynamic-value nft
  int64 dynamic_index = 7;
  // @gotags: gorm:"type:timestamp;autoCreateTime"
  Timestamp created_at = 8;
}

// nft-token链上log
message NftTokenLog{
  int64 id = 1;
  string tx_id = 2;
  //发送地址
  string  from = 3;
  //接收地址
  string to = 4;
  //@gotags:gorm:"index"
  //nft evnent TransferBatch.ids
  int64  token_id = 5;
  //nft evnent TransferBatch.values
  int64 value = 6;
  //how many dollar for these tokens
  double  usd_amt = 7;
  //@gotags:gorm:"foreignKey:TokenId;references:TokenId"
  repeated NftToken NftToken = 8;
  int64 created_at = 9;
}

//    type NftTokenLog struct {
//ID        uint `gorm:"primarykey"`
//    CreatedAt time.Time
//    TxId      string
//    From      string
//    To        string
////nft evnent TransferBatch.ids
//    TokenId int64 `gorm:"index"`
////nft evnent TransferBatch.values
//    Value int64
////how many dollar for these tokens
//    UsdAmt   float64
//    NftToken user.NftToken `gorm:"foreignKey:TokenId;references:TokenId"`
//    }

//type NftTokenPrice struct {
//ID        uint `gorm:"primarykey"`
//    CreatedAt time.Time
//    TokenId   int64
//    ItemPrice float64
////only for dynamic-value nft
//    DynamicIndex int64
//    }



message GetAgentConfigRequest{
  //代理商的用户id
  int64 agent_id=1;
}
//代理商佣金配制
message AgentConfig{
  //代理商的用户id
  int64 id = 1;

  //transak买币佣金比 exapmle 0.01
  double reward_transak = 2;

  //数币兑换usd 0.003
  double reward_sell_coin = 3;
  //usd兑换数币 0.000
  double reward_buy_coin = 4;

//  提现到虚拟卡 0.005
  double reward_withdraw_to_vcard=5;
//    提现到实体卡 0.005
  double reward_withdraw_to_pcard=6;

  //开虚拟卡佣金 exapmle 10$
  double reward_vcard_create = 7;
  //开实体卡佣金 exapmle 20$
  double reward_pcard_create = 8;

  int64 created_at = 9;
  int64 updated_at = 10;
}
message AppConfig{
  int64 id = 1;

//  //数币兑换费用. 比如兑换获得100usd , SwapDiscount是0.02, 用户最终将获得98
//  double swap_discount = 2;

  //创建虚拟卡费用 exapmle 5$
  double create_card_fee = 3;
  //创建实体卡费用 exapmle 10$
  double create_pcard_fee = 4;

  //usd兑换数币以太坊gas费 example 5$
  double gas_fee_eth = 15;
  //polygon网主usdt转账gas费 example 0.005$
  double gas_fee_matic = 16;
  //tron网usdt转账gas费 example 0.08$
  double gas_fee_trx = 19;

  int64 created_at = 9;
  int64 updated_at = 10;
  //服务器钱包地址
  string server_address=11;
  //服务器Tron地址
  string server_taddress=17;
  //nft合约地址
  string nft_address=12;

//    数币兑换usd利润 0.003
  double profit_sell_coin=13;
//    usd兑换数币利润 0.000
  double profit_buy_coin=14;

  //  提现到虚拟卡利润 0.015
  double profit_withdraw_to_vcard=5;
  //    提现到实体卡利润 0.015
  double profit_withdraw_to_pcard=6;

  //开虚拟卡利润 exapmle 5$
  double profit_vcard_create = 7;
  //开实体卡利润 exapmle 10$
  double profit_pcard_create = 8;
  //平台代理商id
  int64 system_agent_id=18;
}

//    type AppConfig struct {
//ID        uint `gorm:"primarykey"`
//    CreatedAt time.Time
//    UpdatedAt time.Time
////数币兑换费用
//    SwapDiscount float64
////创建卡费用
//    CreateCardFee float64
////创建佣金
//    CardCreateReward float64
//    }


message AccountHistory{
  int64 id=1;
  int64 account_id =8;

  //imcome positive, outcome negative
  double amt=2;
 //for Recharge and Withdraw source_id is orderNo. for swap source_id is tx_id
  string source_id =3;
  //only for source_id is tx_id and Symbol is coin
  int64 confirms = 9;
  SourceType source_type=4;
  //  bool status =10;
  uint64 created_at = 5;
  uint64 updated_at = 6;
  //[optoin] not used;
  TrackedTx.ContractSymbol Symbol=7;
  NetWork network=10;
  enum SourceType {
    UnKnow = 0;
    //卡充值到账号
    Recharge = 1;
    //提现到卡
    Withdraw = 2;
    //数币兑换
    Swap = 3;
    CreateCard=4;
    //提币
    TokenTransfer=5;
    //佣金发放
    Reward=6;
    //transak buy coin
    TelaRecharge=7;
  }
}
enum NetWork{
  UnKownNetWork=0;
  ETH=1;
  POLYGON=2;
  TRON=3;
  //账号系统内部转账
  ACOUNT=4;
}





