syntax = "proto3";
package user;

import "user/country.proto";

service CardService{
  //申请卡
  rpc ApplyCard(ApplyCardRequest) returns (ApplyCardResponse) {}
  //卡消费历史 History of payment at other website
  rpc CardHistory(CardHistoryRequest) returns (CardHistoryResponse) {}
  rpc CardExchangeInfoList(CardExchangeInfoListRequest) returns (CardExchangeInfoListResponse) {}
  //卡详情
  rpc CardDetail(CardDetailRequest) returns (CardDetailResponse) {}
  rpc CardList(CardListRequest) returns (CardListResponse) {}
  //账号提现
  rpc CardWithdraw(CardWithdrawRequest) returns (CardWithdrawResponse) {}
  //账号充值
  rpc CardRecharge(CardRechargeRequest) returns (CardRechargeResponse) {}
  //从第三方商户购买nft
  rpc BuyNftForPay(BuyNftForPayRequest) returns (BuyNftForPayResponse) {}
}
message BuyNftForPayRequest {
  //客户邮箱
  string mail=1;
  //银行付款trade_no
  string trade_no=2;
  //支付卡
  string bankcard_no=3;
  //    金额
  double amt=4;
  //币种
  string currency=5;
  //订单时间
  int64 order_time=6;
  //付款时间
  int64 payment_time=7;
  //预设nft订单, 同钱包库的卡交易的orderNo
  string order_id=8;
  //商户编号
  string  mer_no =9;
}
message BuyNftForPayResponse {
  string orderid=1;
  int64 user_id=2;
}

message CardInfo {
  int64 id = 1;
  string card_no =2;
  //USD CNY SGD
  CurrencyCode symbol=3;
  string expiry_date =9;
  string cvv =10;
  string open_id =11;
  int64  user_id=4;
  double balance=5;
  uint64 created_at = 6;
  uint64 updated_at = 7;
}
message ApplyCardRequest {
// default USD
  CurrencyCode currency=2;
}
message ApplyCardResponse {
}

message CardListRequest {

}
message CardListResponse {
  repeated CardInfo items=1;
}
message CardExchangeInfoListRequest {
  string cardNo = 1;
  //same as mysql's offsset; default(0)
  int64 start =2;
  //same as mysql's limit; default(20)
  int64 limit =3;
}
message CardExchangeInfoListResponse {
  repeated CardExchangeInfo items=1;
}

message CardHistoryRequest {
  string cardNo = 1;
////  default 1
//  int64 pageNo = 2;
//  //default 20
//  int64   pageSize = 3;

  //same as mysql's offsset; default(0)
  int64 start =2;
  //same as mysql's limit; default(20)
  int64 limit =3;
  //format 2023-08-08
  string startDate = 4;
  //format 2023-08-08
  string endDate = 5;
}
message CardHistoryResponse {
  repeated CardHistoryItem items=1;
}
message CardHistoryItem {
   string cardNo=1;
   string state=2;
   string orderNo=3;
   string tradeCurrency=4;
   string tradeAmt=5;
   string authCurrency=6;
   string authAmt=7;
   string tradeDes=8;
   string authMerchant=9;
   string authDate=10;
   string settleAmt=11;
   string settleCurrency=12;
   string settleDate=13;

}
message CardDetailRequest {
  string cardNo = 1;
}
message CardDetailResponse {
    string cardNo=1;
    string expiryData=2;
    string cvv=3;
    string state=4;
    string currency=5;
    string settleCurrency=6;
    string amount=7;
}
message CardWithdrawRequest {
  string cardNo = 1;
  double amt = 2;
}
message CardWithdrawResponse {
}

message CardRechargeRequest {
//    卡号	16
  string cardNo = 1;
//    	卡有效期(月)	2
  string card_expire_month =2;
//    卡有效期(年)	4
  string card_expire_year =3;
//  cardSecurityCode CVV2/CSC
  string card_security_code=4;
  double amt = 5;
  bool chargeForNft=6;
  bool with_dynamic_nft=7;
}
message CardRechargeResponse {
  //only for buy nft
  string nft_txid =1;
}

//after recharge/withdraw , this record will insert
message CardExchangeInfo {
  int64 id = 1;
  int64 user_id =12;
  string card_no=2;
  string order_no=8;
  string trade_no=9;
  //only for buy nft
  string nft_txid=13;
  string counter_party=3;
  // counter_party card number
  string counter_party_no=4;
  //imcome positive, outcome negative
  double amt=5;
  Status status =10;
  enum Status{
    Unknow = 0;
    success = 1;
    fail = 2;
  }
  string err_msg =11;
  uint64 created_at = 6;
  uint64 updated_at = 7;
}
